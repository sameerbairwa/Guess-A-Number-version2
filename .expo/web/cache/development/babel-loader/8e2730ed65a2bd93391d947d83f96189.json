{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"D:\\\\Desktop\\\\projects\\\\ReactNative\\\\Guess-A-Number\\\\Screens\\\\GameScreen.js\";\n\nimport React, { useState, useRef, useEffect } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport NumberContainer from \"../components/NumberContainer\";\nimport DefaultStyles from \"../constants/default-styles\";\nimport Card from \"../components/Card\";\n\nvar generateRandomBetween = function generateRandomBetween(min, max, exclude) {\n  min = Math.ceil(min);\n  max = Math.ceil(max);\n  var rndNum = Math.floor(Math.random() * (max - min)) + min;\n\n  if (rndNum === exclude) {\n    return generateRandomBetween(min, max, exclude);\n  } else {\n    return rndNum;\n  }\n};\n\nvar GameScreen = function GameScreen(props) {\n  var _useState = useState(generateRandomBetween(1, 100, props.userChoice)),\n      _useState2 = _slicedToArray(_useState, 2),\n      currentGuess = _useState2[0],\n      setCurrentGuess = _useState2[1];\n\n  var _useState3 = useState(0),\n      _useState4 = _slicedToArray(_useState3, 2),\n      Rounds = _useState4[0],\n      setRounds = _useState4[1];\n\n  var currentLow = useRef(1);\n  var currentHigh = useRef(100);\n  var userChoice = props.userChoice,\n      onGameOver = props.onGameOver;\n  useEffect(function () {\n    if (currentGuess === userChoice) {\n      onGameOver(Rounds);\n    }\n  }, [currentGuess, userChoice, onGameOver]);\n\n  var nextGuessHandler = function nextGuessHandler(direction) {\n    if (direction === \"lower\" && currentGuess < props.userChoice || direction === \"greater\" && currentGuess > props.userChoice) {\n      Alert.alert(\"Don't lie!\", \"You know that is wrong...\", [{\n        text: \"Sorry\",\n        style: \"cancle\"\n      }]);\n      return;\n    }\n\n    if (direction === \"lower\") {\n      currentHigh.current = currentGuess;\n    } else {\n      currentLow.current = currentGuess;\n    }\n\n    var nextNumber = generateRandomBetween(currentLow.current, currentHigh.current, currentGuess);\n    setCurrentGuess(nextNumber);\n    setRounds(function (curRounds) {\n      return curRounds + 1;\n    });\n  };\n\n  return React.createElement(View, {\n    style: styles.screen,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 5\n    }\n  }, React.createElement(Text, {\n    style: DefaultStyles.title,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }\n  }, \" Opponent's Guess \"), React.createElement(NumberContainer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }\n  }, \" \", currentGuess), React.createElement(Card, {\n    style: styles.buttonContainer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }\n  }, React.createElement(Button, {\n    title: \"LOWER\",\n    onPress: nextGuessHandler.bind(_this, \"lower\"),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }\n  }), React.createElement(Button, {\n    title: \"GREATER\",\n    onPress: nextGuessHandler.bind(_this, \"greater\"),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 9\n    }\n  })));\n};\n\nvar styles = StyleSheet.create({\n  screen: {\n    flex: 1,\n    padding: 10,\n    alignItems: \"center\"\n  },\n  buttonContainer: {\n    flexDirection: \"row\",\n    justifyContent: \"space-around\",\n    marginTop: 20,\n    width: 300,\n    maxWidth: \"80%\"\n  }\n});\nexport default GameScreen;","map":{"version":3,"sources":["D:/Desktop/projects/ReactNative/Guess-A-Number/Screens/GameScreen.js"],"names":["React","useState","useRef","useEffect","NumberContainer","DefaultStyles","Card","generateRandomBetween","min","max","exclude","Math","ceil","rndNum","floor","random","GameScreen","props","userChoice","currentGuess","setCurrentGuess","Rounds","setRounds","currentLow","currentHigh","onGameOver","nextGuessHandler","direction","Alert","alert","text","style","current","nextNumber","curRounds","styles","screen","title","buttonContainer","bind","StyleSheet","create","flex","padding","alignItems","flexDirection","justifyContent","marginTop","width","maxWidth"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\nimport { View, Text, StyleSheet, Button, Alert } from \"react-native\";\nimport NumberContainer from \"../components/NumberContainer\";\nimport DefaultStyles from \"../constants/default-styles\";\n\nimport Card from \"../components/Card\";\n\nconst generateRandomBetween = (min, max, exclude) => {\n  min = Math.ceil(min);\n  max = Math.ceil(max);\n  const rndNum = Math.floor(Math.random() * (max - min)) + min;\n  if (rndNum === exclude) {\n    return generateRandomBetween(min, max, exclude);\n  } else {\n    return rndNum;\n  }\n};\n\nconst GameScreen = (props) => {\n  const [currentGuess, setCurrentGuess] = useState(\n    generateRandomBetween(1, 100, props.userChoice)\n  );\n  const [Rounds, setRounds] = useState(0);\n  const currentLow = useRef(1);\n  const currentHigh = useRef(100);\n\n  const { userChoice, onGameOver } = props;\n\n  useEffect(() => {\n    if (currentGuess === userChoice) {\n      onGameOver(Rounds);\n    }\n  }, [currentGuess, userChoice, onGameOver]);\n\n  const nextGuessHandler = (direction) => {\n    if (\n      (direction === \"lower\" && currentGuess < props.userChoice) ||\n      (direction === \"greater\" && currentGuess > props.userChoice)\n    ) {\n      Alert.alert(\"Don't lie!\", \"You know that is wrong...\", [\n        { text: \"Sorry\", style: \"cancle\" },\n      ]);\n      return;\n    }\n    if (direction === \"lower\") {\n      currentHigh.current = currentGuess;\n    } else {\n      currentLow.current = currentGuess;\n    }\n    const nextNumber = generateRandomBetween(\n      currentLow.current,\n      currentHigh.current,\n      currentGuess\n    );\n    setCurrentGuess(nextNumber);\n    setRounds((curRounds) => curRounds + 1);\n  };\n\n  return (\n    <View style={styles.screen}>\n      <Text style={DefaultStyles.title}> Opponent's Guess </Text>\n      <NumberContainer> {currentGuess}</NumberContainer>\n      <Card style={styles.buttonContainer}>\n        <Button title=\"LOWER\" onPress={nextGuessHandler.bind(this, \"lower\")} />\n        <Button\n          title=\"GREATER\"\n          onPress={nextGuessHandler.bind(this, \"greater\")}\n        />\n      </Card>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  screen: {\n    flex: 1,\n    padding: 10,\n    alignItems: \"center\",\n  },\n  buttonContainer: {\n    flexDirection: \"row\",\n    justifyContent: \"space-around\",\n    marginTop: 20,\n    width: 300,\n    maxWidth: \"80%\",\n  },\n});\n\nexport default GameScreen;\n"]},"metadata":{},"sourceType":"module"}
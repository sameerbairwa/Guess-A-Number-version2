{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _jsxFileName = \"D:\\\\Desktop\\\\projects\\\\ReactNative\\\\Guess-A-Number\\\\Screens\\\\GameScreen.js\",\n    _this = this;\n\nimport React, { useState, useRef, useEffect } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport { Ionicons } from \"@expo/vector-icons\";\nimport NumberContainer from \"../components/NumberContainer\";\nimport DefaultStyles from \"../constants/default-styles\";\nimport MainButton from \"../components/MainButton\";\nimport Card from \"../components/Card\";\nimport BodyText from \"../components/BodyText\";\n\nvar generateRandomBetween = function generateRandomBetween(min, max, exclude) {\n  min = Math.ceil(min);\n  max = Math.ceil(max);\n  var rndNum = Math.floor(Math.random() * (max - min)) + min;\n\n  if (rndNum === exclude) {\n    return generateRandomBetween(min, max, exclude);\n  } else {\n    return rndNum;\n  }\n};\n\nvar renderListItem = function renderListItem(value, numOfRound) {\n  return React.createElement(View, {\n    key: value,\n    style: styles.listItem,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 3\n    }\n  }, React.createElement(BodyText, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 5\n    }\n  }, \"#\", numOfRound), React.createElement(BodyText, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 5\n    }\n  }, value));\n};\n\nvar GameScreen = function GameScreen(props) {\n  var initialGuess = generateRandomBetween(1, 100, props.userChoice);\n\n  var _useState = useState(initialGuess),\n      _useState2 = _slicedToArray(_useState, 2),\n      currentGuess = _useState2[0],\n      setCurrentGuess = _useState2[1];\n\n  var _useState3 = useState([initialGuess]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      pastGuesses = _useState4[0],\n      setPastGuesses = _useState4[1];\n\n  var currentLow = useRef(1);\n  var currentHigh = useRef(100);\n  var userChoice = props.userChoice,\n      onGameOver = props.onGameOver;\n  useEffect(function () {\n    if (currentGuess === userChoice) {\n      onGameOver(pastGuesses.length);\n    }\n  }, [currentGuess, userChoice, onGameOver]);\n\n  var nextGuessHandler = function nextGuessHandler(direction) {\n    if (direction === \"lower\" && currentGuess < props.userChoice || direction === \"greater\" && currentGuess > props.userChoice) {\n      Alert.alert(\"Don't lie!\", \"You know that is wrong...\", [{\n        text: \"Sorry\",\n        style: \"cancle\"\n      }]);\n      return;\n    }\n\n    if (direction === \"lower\") {\n      currentHigh.current = currentGuess;\n    } else {\n      currentLow.current = currentGuess + 1;\n    }\n\n    var nextNumber = generateRandomBetween(currentLow.current, currentHigh.current, currentGuess);\n    setCurrentGuess(nextNumber);\n    setPastGuesses(function (currPastGuesses) {\n      return [nextNumber].concat(_toConsumableArray(currPastGuesses));\n    });\n  };\n\n  return React.createElement(View, {\n    style: styles.screen,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 5\n    }\n  }, React.createElement(Text, {\n    style: DefaultStyles.title,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }\n  }, \" Opponent's Guess \"), React.createElement(NumberContainer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }\n  }, \" \", currentGuess), React.createElement(Card, {\n    style: styles.buttonContainer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }\n  }, React.createElement(MainButton, {\n    onPress: nextGuessHandler.bind(_this, \"lower\"),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 9\n    }\n  }, React.createElement(Ionicons, {\n    name: \"md-remove\",\n    size: 24,\n    color: \"white\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 11\n    }\n  })), React.createElement(MainButton, {\n    onPress: nextGuessHandler.bind(_this, \"greater\"),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 9\n    }\n  }, React.createElement(Ionicons, {\n    name: \"md-add\",\n    size: 24,\n    color: \"white\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 11\n    }\n  }))), React.createElement(View, {\n    style: styles.listContainer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }\n  }, React.createElement(ScrollView, {\n    contentContainerStyle: styles.list,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 9\n    }\n  }, pastGuesses.map(function (guess, index) {\n    return renderListItem(guess, pastGuesses.length - index);\n  }))));\n};\n\nvar styles = StyleSheet.create({\n  screen: {\n    flex: 1,\n    padding: 10,\n    alignItems: \"center\"\n  },\n  buttonContainer: {\n    flexDirection: \"row\",\n    justifyContent: \"space-around\",\n    marginTop: 20,\n    width: 400,\n    maxWidth: \"90%\"\n  },\n  listContainer: {\n    flex: 1,\n    width: \"80%\"\n  },\n  list: {\n    flexGrow: 1,\n    alignItems: \"center\",\n    justifyContent: \"flex-end\"\n  },\n  listItem: {\n    borderColor: \"#ccc\",\n    borderWidth: 1,\n    padding: 15,\n    marginVertical: 10,\n    backgroundColor: \"white\",\n    flexDirection: \"row\",\n    justifyContent: \"space-around\"\n  }\n});\nexport default GameScreen;","map":{"version":3,"sources":["D:/Desktop/projects/ReactNative/Guess-A-Number/Screens/GameScreen.js"],"names":["React","useState","useRef","useEffect","Ionicons","NumberContainer","DefaultStyles","MainButton","Card","BodyText","generateRandomBetween","min","max","exclude","Math","ceil","rndNum","floor","random","renderListItem","value","numOfRound","styles","listItem","GameScreen","props","initialGuess","userChoice","currentGuess","setCurrentGuess","pastGuesses","setPastGuesses","currentLow","currentHigh","onGameOver","length","nextGuessHandler","direction","Alert","alert","text","style","current","nextNumber","currPastGuesses","screen","title","buttonContainer","bind","listContainer","list","map","guess","index","StyleSheet","create","flex","padding","alignItems","flexDirection","justifyContent","marginTop","width","maxWidth","flexGrow","borderColor","borderWidth","marginVertical","backgroundColor"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\nimport {\n  View,\n  Text,\n  StyleSheet,\n  Alert,\n  ScrollView,\n  FlatList,\n} from \"react-native\";\nimport { Ionicons } from \"@expo/vector-icons\";\n\nimport NumberContainer from \"../components/NumberContainer\";\nimport DefaultStyles from \"../constants/default-styles\";\nimport MainButton from \"../components/MainButton\";\nimport Card from \"../components/Card\";\nimport BodyText from \"../components/BodyText\";\n\nconst generateRandomBetween = (min, max, exclude) => {\n  min = Math.ceil(min);\n  max = Math.ceil(max);\n  const rndNum = Math.floor(Math.random() * (max - min)) + min;\n  if (rndNum === exclude) {\n    return generateRandomBetween(min, max, exclude);\n  } else {\n    return rndNum;\n  }\n};\n\nconst renderListItem = (value, numOfRound) => (\n  <View key={value} style={styles.listItem}>\n    <BodyText>#{numOfRound}</BodyText>\n    <BodyText>{value}</BodyText>\n  </View>\n);\n\n// const renderListItem = (listLength, itemData) => (\n//   <View style={styles.listItem}>\n//     <BodyText>#{listLength - itemData.index}</BodyText>\n//     <BodyText>{itemData.item}</BodyText>\n//   </View>\n// );\n\nconst GameScreen = (props) => {\n  const initialGuess = generateRandomBetween(1, 100, props.userChoice);\n  const [currentGuess, setCurrentGuess] = useState(initialGuess);\n  //const [Rounds, setRounds] = useState(0);\n  //Register guess numbers\n  const [pastGuesses, setPastGuesses] = useState([initialGuess]);\n  ///const [pastGuesses, setPastGuesses] = useState([initialGuess.toString()]);\n\n  const currentLow = useRef(1);\n  const currentHigh = useRef(100);\n\n  const { userChoice, onGameOver } = props;\n\n  useEffect(() => {\n    if (currentGuess === userChoice) {\n      onGameOver(pastGuesses.length);\n    }\n  }, [currentGuess, userChoice, onGameOver]);\n\n  const nextGuessHandler = (direction) => {\n    if (\n      (direction === \"lower\" && currentGuess < props.userChoice) ||\n      (direction === \"greater\" && currentGuess > props.userChoice)\n    ) {\n      Alert.alert(\"Don't lie!\", \"You know that is wrong...\", [\n        { text: \"Sorry\", style: \"cancle\" },\n      ]);\n      return;\n    }\n    if (direction === \"lower\") {\n      currentHigh.current = currentGuess;\n    } else {\n      currentLow.current = currentGuess + 1;\n    }\n    const nextNumber = generateRandomBetween(\n      currentLow.current,\n      currentHigh.current,\n      currentGuess\n    );\n    setCurrentGuess(nextNumber);\n    //setRounds((curRounds) => curRounds + 1);\n    setPastGuesses((currPastGuesses) => [nextNumber, ...currPastGuesses]);\n    //for flatList\n    //setPastGuesses((currPastGuesses) => [nextNumber.toString(), ...currPastGuesses]);\n  };\n\n  return (\n    <View style={styles.screen}>\n      <Text style={DefaultStyles.title}> Opponent's Guess </Text>\n      <NumberContainer> {currentGuess}</NumberContainer>\n      <Card style={styles.buttonContainer}>\n        <MainButton onPress={nextGuessHandler.bind(this, \"lower\")}>\n          {/* LOWER */}\n          <Ionicons name=\"md-remove\" size={24} color=\"white\" />\n        </MainButton>\n        <MainButton onPress={nextGuessHandler.bind(this, \"greater\")}>\n          {/* GREATER */}\n          <Ionicons name=\"md-add\" size={24} color=\"white\" />\n        </MainButton>\n      </Card>\n      <View style={styles.listContainer}>\n        <ScrollView contentContainerStyle={styles.list}>\n          {pastGuesses.map((guess, index) =>\n            renderListItem(guess, pastGuesses.length - index)\n          )}\n        </ScrollView>\n        {/* <FlatList \n          contentContainerStyle={styles.list}\n          keyExtractor={(item) => item}\n          data={pastGuesses}\n          renderItem={renderListItem.bind(this, pastGuesses.length)}\n        ></FlatList> */}\n      </View>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  screen: {\n    flex: 1,\n    padding: 10,\n    alignItems: \"center\",\n  },\n  buttonContainer: {\n    flexDirection: \"row\",\n    justifyContent: \"space-around\",\n    marginTop: 20,\n    width: 400,\n    maxWidth: \"90%\",\n  },\n  listContainer: {\n    flex: 1,\n    width: \"80%\",\n  },\n  list: {\n    flexGrow: 1,\n    alignItems: \"center\",\n    justifyContent: \"flex-end\",\n  },\n  listItem: {\n    borderColor: \"#ccc\",\n    borderWidth: 1,\n    padding: 15,\n    marginVertical: 10,\n    backgroundColor: \"white\",\n    flexDirection: \"row\",\n    justifyContent: \"space-around\",\n  },\n});\n\nexport default GameScreen;\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"D:\\\\Desktop\\\\projects\\\\ReactNative\\\\Guess-A-Number\\\\Screens\\\\GameScreen.js\";\n\nimport React, { useState, useRef, useEffect } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport { Ionicons } from \"@expo/vector-icons\";\nimport NumberContainer from \"../components/NumberContainer\";\nimport DefaultStyles from \"../constants/default-styles\";\nimport MainButton from \"../components/MainButton\";\nimport Card from \"../components/Card\";\n\nvar generateRandomBetween = function generateRandomBetween(min, max, exclude) {\n  min = Math.ceil(min);\n  max = Math.ceil(max);\n  var rndNum = Math.floor(Math.random() * (max - min)) + min;\n\n  if (rndNum === exclude) {\n    return generateRandomBetween(min, max, exclude);\n  } else {\n    return rndNum;\n  }\n};\n\nvar GameScreen = function GameScreen(props) {\n  var initialGuess = generateRandomBetween(1, 100, props.userChoice);\n\n  var _useState = useState(initialGuess),\n      _useState2 = _slicedToArray(_useState, 2),\n      currentGuess = _useState2[0],\n      setCurrentGuess = _useState2[1];\n\n  var _useState3 = useState([initialGuess]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      pastGuesses = _useState4[0],\n      setPastGuesses = _useState4[1];\n\n  var currentLow = useRef(1);\n  var currentHigh = useRef(100);\n  var userChoice = props.userChoice,\n      onGameOver = props.onGameOver;\n  useEffect(function () {\n    if (currentGuess === userChoice) {\n      onGameOver(Rounds);\n    }\n  }, [currentGuess, userChoice, onGameOver]);\n\n  var nextGuessHandler = function nextGuessHandler(direction) {\n    if (direction === \"lower\" && currentGuess < props.userChoice || direction === \"greater\" && currentGuess > props.userChoice) {\n      Alert.alert(\"Don't lie!\", \"You know that is wrong...\", [{\n        text: \"Sorry\",\n        style: \"cancle\"\n      }]);\n      return;\n    }\n\n    if (direction === \"lower\") {\n      currentHigh.current = currentGuess;\n    } else {\n      currentLow.current = currentGuess + 1;\n    }\n\n    var nextNumber = generateRandomBetween(currentLow.current, currentHigh.current, currentGuess);\n    setCurrentGuess(nextNumber);\n    setPastGuesses(function (currPastGuesses) {\n      [nextNumber].concat(_toConsumableArray(currPastGuesses));\n    });\n  };\n\n  return React.createElement(View, {\n    style: styles.screen,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 5\n    }\n  }, React.createElement(Text, {\n    style: DefaultStyles.title,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }\n  }, \" Opponent's Guess \"), React.createElement(NumberContainer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }\n  }, \" \", currentGuess), React.createElement(Card, {\n    style: styles.buttonContainer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }\n  }, React.createElement(MainButton, {\n    onPress: nextGuessHandler.bind(_this, \"lower\"),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 9\n    }\n  }, React.createElement(Ionicons, {\n    name: \"md-remove\",\n    size: 24,\n    color: \"white\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 11\n    }\n  })), React.createElement(MainButton, {\n    onPress: nextGuessHandler.bind(_this, \"greater\"),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }\n  }, React.createElement(Ionicons, {\n    name: \"md-add\",\n    size: 24,\n    color: \"white\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 11\n    }\n  }))), React.createElement(ScrollView, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }\n  }, pastGuesses.map(function (guess) {\n    React.createElement(View, {\n      key: guess,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 11\n      }\n    }, React.createElement(Text, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 13\n      }\n    }, guess));\n  })));\n};\n\nvar styles = StyleSheet.create({\n  screen: {\n    flex: 1,\n    padding: 10,\n    alignItems: \"center\"\n  },\n  buttonContainer: {\n    flexDirection: \"row\",\n    justifyContent: \"space-around\",\n    marginTop: 20,\n    width: 400,\n    maxWidth: \"90%\"\n  }\n});\nexport default GameScreen;","map":{"version":3,"sources":["D:/Desktop/projects/ReactNative/Guess-A-Number/Screens/GameScreen.js"],"names":["React","useState","useRef","useEffect","Ionicons","NumberContainer","DefaultStyles","MainButton","Card","generateRandomBetween","min","max","exclude","Math","ceil","rndNum","floor","random","GameScreen","props","initialGuess","userChoice","currentGuess","setCurrentGuess","pastGuesses","setPastGuesses","currentLow","currentHigh","onGameOver","Rounds","nextGuessHandler","direction","Alert","alert","text","style","current","nextNumber","currPastGuesses","styles","screen","title","buttonContainer","bind","map","guess","StyleSheet","create","flex","padding","alignItems","flexDirection","justifyContent","marginTop","width","maxWidth"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\nimport { View, Text, StyleSheet, Alert, ScrollView } from \"react-native\";\nimport { Ionicons } from \"@expo/vector-icons\";\n\nimport NumberContainer from \"../components/NumberContainer\";\nimport DefaultStyles from \"../constants/default-styles\";\nimport MainButton from \"../components/MainButton\";\nimport Card from \"../components/Card\";\n\nconst generateRandomBetween = (min, max, exclude) => {\n  min = Math.ceil(min);\n  max = Math.ceil(max);\n  const rndNum = Math.floor(Math.random() * (max - min)) + min;\n  if (rndNum === exclude) {\n    return generateRandomBetween(min, max, exclude);\n  } else {\n    return rndNum;\n  }\n};\n\nconst GameScreen = (props) => {\n  const initialGuess = generateRandomBetween(1, 100, props.userChoice);\n  const [currentGuess, setCurrentGuess] = useState(initialGuess);\n  //const [Rounds, setRounds] = useState(0);\n  //Register guess numbers\n  const [pastGuesses, setPastGuesses] = useState([initialGuess]);\n  const currentLow = useRef(1);\n  const currentHigh = useRef(100);\n\n  const { userChoice, onGameOver } = props;\n\n  useEffect(() => {\n    if (currentGuess === userChoice) {\n      onGameOver(Rounds);\n    }\n  }, [currentGuess, userChoice, onGameOver]);\n\n  const nextGuessHandler = (direction) => {\n    if (\n      (direction === \"lower\" && currentGuess < props.userChoice) ||\n      (direction === \"greater\" && currentGuess > props.userChoice)\n    ) {\n      Alert.alert(\"Don't lie!\", \"You know that is wrong...\", [\n        { text: \"Sorry\", style: \"cancle\" },\n      ]);\n      return;\n    }\n    if (direction === \"lower\") {\n      currentHigh.current = currentGuess;\n    } else {\n      currentLow.current = currentGuess + 1;\n    }\n    const nextNumber = generateRandomBetween(\n      currentLow.current,\n      currentHigh.current,\n      currentGuess\n    );\n    setCurrentGuess(nextNumber);\n    //setRounds((curRounds) => curRounds + 1);\n    setPastGuesses((currPastGuesses) => {\n      [nextNumber, ...currPastGuesses];\n    });\n  };\n\n  return (\n    <View style={styles.screen}>\n      <Text style={DefaultStyles.title}> Opponent's Guess </Text>\n      <NumberContainer> {currentGuess}</NumberContainer>\n      <Card style={styles.buttonContainer}>\n        <MainButton onPress={nextGuessHandler.bind(this, \"lower\")}>\n          {/* LOWER */}\n          <Ionicons name=\"md-remove\" size={24} color=\"white\" />\n        </MainButton>\n        <MainButton onPress={nextGuessHandler.bind(this, \"greater\")}>\n          {/* GREATER */}\n          <Ionicons name=\"md-add\" size={24} color=\"white\" />\n        </MainButton>\n      </Card>\n      <ScrollView>\n        {pastGuesses.map((guess) => {\n          <View key={guess}>\n            <Text>{guess}</Text>\n          </View>;\n        })}\n      </ScrollView>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  screen: {\n    flex: 1,\n    padding: 10,\n    alignItems: \"center\",\n  },\n  buttonContainer: {\n    flexDirection: \"row\",\n    justifyContent: \"space-around\",\n    marginTop: 20,\n    width: 400,\n    maxWidth: \"90%\",\n  },\n});\n\nexport default GameScreen;\n"]},"metadata":{},"sourceType":"module"}